%{
    type pos = int

    exception ParseErr of string * pos
%}

/* start symbol */
%start Prog

/* tokens - used in the lexer */
%token <(int*int)> 			EOF Pos

/* arithmetic operators */
%token <(int*int)> 			Assign Equal Less Plus Minus Times Div

/* logical operators */
%token <(int*int)> 			And Or Not

/* constant literals */
%token <bool*(int*int)>		LogicLit
%token <int*(int*int)>		NumLit
%token <char*(int*int)>		CharLit
%token <string*(int*int)>	StringLit

/* identifier */
%token <string>				Ident

/* type qualifiers */
%token <(int*int)>			Int Bool Char Array

/* symbols */
%token <(int*int)> 			Colon Comma LCurly RCurly RParen LParen RParen LBracket RBracket Semi

/* keywords */
%token <(int*int)> 			Array Begin Do Function If Else End Of Program
							Procedure Return Then Var While

/* non-terminals */
%type <AbSyn.Prog>			Prog FunDecs

%type <AbSyn.FunDec>		FunDec
%type <AbSyn.StmtBlock>		Block
%type <AbSyn.Stmt list>		StmtSeq SBlock

%type <AbSyn.Dec list>		PDecl Params Decs DBlock
%type <AbSyn.Dec>			Dec

%type <AbSyn.Exp list>		Exps CallParams
%type <AbSyn.Exp>			Exp

%type <AbSyn.Stmt>			Stmt

%type <AbSyn.Type>			Type
%type <AbSyn.BasicVal>		BasicVal
%type <AbSyn.LVAL>			LVAL
%type <AbSyn.Value>			Value

%%

/* program structure */
Prog		: Program Ident Semi FunDecs EOF		{ $4 };

FunDecs		: FunDecs FunDec						{ $2 :: $1 }
			| FunDec 								{ $1 :: [] };

FunDec		: Procedure Ident LParen PDecl RParen Block Semi 		{ AbSyn.Proc ($2, $4, $6, $1) }
			| Function Type Ident LParen PDecl RParen Block Semi 	{ AbSyn.Func ($2, $3, $5, $7, $1) };

Block 		: DBlock SBlock 						{ AbSyn.Block ($1, $2) };

DBlock		: Var Decs								{ $2 }
			|										{ [] };

SBlock		: Begin StmtSeq Semi End				{ $2 }
			| Stmt 									{ $1 :: [] };

StmtSeq		: StmtSeq Semi Stmt 					{ $3 :: $1 }
			| Stmt 									{ $1 :: [] };

/* statements */
Stmt 		: Ident LParen CallParams RParen		{ AbSyn.ProcCall($1, $3, $2) }
			| If Exp Then Block Else Block 			{ AbSyn.IfThEl ($2, $4, $6, $1) }
			| While Exp Do Block 					{ AbSyn.While ($2, $4, $1) }
			| Return Exp							{ AbSyn.Return (SOME $2, $1) }
	 		| Return								{ AbSyn.Return (NONE, $1) }
	 		| LVAL Assign Exp						{ AbSyn.Assign ($1, $3, $2) };

/* variable and parameter declarations, types */
PDecl		: Params 								{ $1 }
			| 										{ [] };

Params 		: Params Semi Dec 						{ $3 :: $1 }
			| Dec 									{ $1 :: [] };

Dec			: Ident Colon Type						{ AbSyn.Dec ($1, $3, $2) };

Decs 		: Decs Dec Semi							{ $2 :: $1 }
			| Dec Semi								{ $1 :: [] };

Type 		: Int 									{ AbSyn.Int ($1) }
	 		| Bool 									{ AbSyn.Bool ($1) }
	 		| Char 									{ AbSyn.Char ($1) }
	 		| Array Of Type 						{ AbSyn.Array ($3, $1) };

/* l-values and expressions */
LVAL 		: Ident 								{ AbSyn.Var ($1) }
			| Ident LBracket Exps RBracket			{ AbSyn.Index ($1, $3) };

Exp 		: LParen Exp RParen						{ $2 }
			| LCurly Exps RCurly					{ AbSyn.ArrLit ($2, $1) }
			
			/* variables and literals */
			| LVAL									{ AbSyn.LValue ($1, (0,0)) }
			| Value									{ AbSyn.Literal ($1, (0,0)) }
			| StringLit								{ AbSyn.StrLit ($1) }

			/* arithmetic */
			| Exp Plus Exp 							{ AbSyn.Plus ($1, $3, $2) }
			| Exp Minus Exp 						{ AbSyn.Minus ($1, $3, $2) }
			| Exp Times Exp 						{ AbSyn.Times ($1, $3, $2) }
			| Exp Div Exp 							{ AbSyn.Div ($1, $3, $2) }

			/* logical */
			| Exp And Exp 							{ AbSyn.And ($1, $3, $2) }
			| Exp Or Exp 							{ AbSyn.Or ($1, $3, $2) }
			| Not Exp 								{ AbSyn.Not ($2, $1) }

			/* function call */
			| Ident LParen CallParams RParen		{ AbSyn.FunApp ($1, $3, $2) };

Value 		: BasicVal								{ AbSyn.BVal ($1) };

BasicVal	: NumLit								{ AbSyn.Num (#1 $1) }
			| CharLit								{ AbSyn.Chr (#1 $1) }
			| LogicLit								{ AbSyn.Log (#1 $1) };

/* function and procedure parameters and index lists */
CallParams	: Exps 									{ $1 }
			|										{ [] };

Exps 		: Exp Comma Exps 						{ $1 :: $3 }
			| Exp 									{ $1 :: [] };

%%

(* SML trailer

 At this point we can use the parse function (%start above), whose type is
   Start : (Lexing.lexbuf -> token) -> Lexing.lexbuf -> Exp;

  (Lexing.lexbuf -> token) is usually mosmllex-generated, but a simple hack
  here.

*)
